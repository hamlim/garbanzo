import type { RouteDefinition } from "@garbanzo/types";

// All other file types we preserve the extensions for
function hasStandardExtension(filePath: string): boolean {
  return [".ts", ".tsx", ".js", ".jsx"].some((ext) => filePath.endsWith(ext));
}

export function generateImports(
  {
    appPath,
    routeDefinitions,
  }: {
    appPath: string;
    routeDefinitions: Array<RouteDefinition>;
  },
  {
    nodePath,
  }: {
    nodePath: typeof import("node:path");
  },
): Array<string> {
  let appRelativePath = nodePath.basename(appPath);
  return routeDefinitions.map((routeDefinition) => {
    let { filePath, __name } = routeDefinition;

    let importPath = filePath;
    if (hasStandardExtension(filePath)) {
      importPath = filePath
        // remove extension
        .replace(nodePath.extname(filePath), "");
    }

    importPath = `${appRelativePath}/${importPath}`;

    return `import ${__name} from "./${importPath}";`;
  });
}

export function generateRoutes(
  routeDefinitions: Array<RouteDefinition>,
): Array<string> {
  return routeDefinitions.map((routeDefinition) => {
    let { route, kind, type, __name } = routeDefinition;

    switch (kind) {
      case "dynamic-page": {
        return [
          `createPage({`,
          `  render: "dynamic",`,
          `  path: "${route}",`,
          `  component: ${__name},`,
          `}),`,
        ].join("\n");
      }
      case "static-page": {
        return [
          `createPage({`,
          `  render: "static",`,
          `  path: "${route}",`,
          `  component: ${__name},`,
          `}),`,
        ].join("\n");
      }
      case "route": {
        return [
          `createApi({`,
          `  render: "dynamic",`,
          `  path: "${route}",`,
          `  handlers: {`,
          `    GET: ${__name},`,
          `    POST: ${__name},`,
          `    PUT: ${__name},`,
          `    DELETE: ${__name},`,
          `    PATCH: ${__name},`,
          `    OPTIONS: ${__name},`,
          `    HEAD: ${__name},`,
          `    TRACE: ${__name},`,
          `    CONNECT: ${__name},`,
          `  },`,
          `}),`,
        ].join("\n");
      }
      case "meta": {
        switch (type) {
          case "@root": {
            return [
              `createRoot({`,
              `  render: "dynamic",`,
              `  component: ${__name},`,
              `}),`,
            ].join("\n");
          }
          case "@layout": {
            return [
              `createLayout({`,
              `  render: "dynamic",`,
              `  path: "${route}",`,
              `  component: ${__name},`,
              `}),`,
            ].join("\n");
          }
          case "@not-found": {
            return [
              `createPage({`,
              `  render: "dynamic",`,
              `  path: "${route}",`,
              `  component: ${__name},`,
              `}),`,
            ].join("\n");
          }
        }
      }
    }

    return [
      "// this is an error in @garbanzo/cli - please report!",
      "/*",
      `${JSON.stringify(routeDefinition, null, 2)}`,
      "*/",
    ].join("\n");
  });
}

export function generateEntries(
  {
    appPath,
    routeDefinitions,
  }: {
    appPath: string;
    routeDefinitions: Array<RouteDefinition>;
  },
  {
    nodePath,
  }: {
    nodePath: typeof import("node:path");
  },
): string {
  return [
    "/* this file is automatically generated by garbanzo */",
    "/* DO NOT MANUALLY EDIT THIS FILE */",
    "",
    `import { createPages } from "waku";`,
    `import type { PathsForPages } from "waku/router";`,
    "",
    ...generateImports(
      { appPath, routeDefinitions },
      {
        nodePath,
      },
    ),
    "",
    `let pages = createPages(async ({ createPage, createLayout, createRoot, createApi }) => [`,
    ...generateRoutes(routeDefinitions),
    `]);`,
    "",
    `declare module "waku/router" {`,
    `  interface RouteConfig {`,
    `    paths: PathsForPages<typeof pages>;`,
    `  }`,
    `  interface CreatePagesConfig {`,
    `    pages: typeof pages;`,
    `  }`,
    `}`,
    "",
    `export default pages;`,
  ].join("\n");
}
